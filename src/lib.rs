mod phash;

pub use crate::phash::{dct_imagehash, dct_imagehash_from_memory, mh_imagehash, mh_imagehash_from_memory};

#[cfg(test)]
mod tests {
    use crate::phash;
    #[test]
    fn it_works() {
        let result = 2 + 2;
        assert_eq!(result, 4);
    }

    #[test]
    fn dct_hash() {
        let hash = phash::dct_imagehash("testdata/Lenna.png").unwrap();
        assert_eq!(hash, 1968835945970692390_u64);
    }

    #[test]
    fn dct_hash_from_memory() {
        let data = std::fs::read("testdata/Lenna.png").unwrap();
        let hash = phash::dct_imagehash_from_memory(&data).unwrap();
        assert_eq!(hash, 1968835945970692390_u64);
    }

    #[test]
    fn foo() {
        let expect: Vec<u8> = vec![
            0x25, 0x36, 0xef, 0x9f, 0x8a, 0x5b, 0x6d, 0x18, 0x7a, 0xa4, 0xb6, 0xf5, 0xc6, 0xd4, 0x42, 0x6c, 0x50, 0xf5, 0xa4, 0xb6, 0xda, 0xbc, 0x20, 0x34, 0x73, 0x64, 0xf4, 0xb6, 0xb6, 0xe5, 0x52, 0xe7, 0x25, 0xad, 0x5b, 0xb9, 0xb4, 0xa6, 0xc7, 0x65, 0x57, 0xb2, 0xd8, 0xa7, 0xe1, 0xa4, 0xb6, 0x85, 0x66, 0xfc, 0x2d, 0xa6, 0x40, 0xd7, 0x36, 0xce, 0xd2, 0x9f, 0x11, 0x69, 0xd8, 0xed, 0xa4, 0x2d, 0xb6, 0xea, 0x49, 0x5b, 0x31, 0x23, 0x1b, 0x5d
        ];
        let hash = phash::mh_imagehash("testdata/Lenna.png", &phash::MHImageHashArgs::default()).unwrap();
        assert_eq!(hash, expect);
    }
}
